{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","CardList","robots","map","_user","i","Components_Card","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","childrecdcdn","Component","App","onSearchChange","event","searchfield","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","Components_Searchbox","Components_Scroll","Components_ErrorBoundry","Components_CardList","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_Containers_App"],"mappings":"yNAeeA,MAbf,SAAAC,GAAiC,IAAlBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,MAAOC,EAAKH,EAALG,GAExB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,mBACRC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCcLQ,EApBE,SAAAV,GAAgB,IAAbW,EAAaX,EAAbW,OACZ,OACIP,EAAAC,EAAAC,cAAA,WAEIK,EAAOC,IAAI,SAACC,EAAMC,GAClB,OACIV,EAAAC,EAAAC,cAACS,EAAD,CACIC,IAAKF,EACLX,GAAIQ,EAAOG,GAAGX,GACdF,KAAMU,EAAOG,GAAGb,KAChBC,MAAOS,EAAOG,GAAGZ,YCC1Be,EAZG,SAAAjB,GAAsB,IAAnBkB,EAAmBlB,EAAnBkB,aACjB,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iCACjBY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGPI,EATA,SAACC,GACZ,OACInB,EAAAC,EAAAC,cAAA,OAAKkB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAoBC,OAAQ,UAClEJ,EAAMK,WCiBJC,cAnBX,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KACDc,MAAQ,CACTC,UAAU,GAHCR,iFAODS,EAAOC,GACrBP,KAAKQ,SAAS,CAAEH,UAAU,qCAI1B,OAAIL,KAAKI,MAAMC,SACJlC,EAAAC,EAAAC,cAAA,uCAEJ2B,KAAKV,MAAMmB,oBAhBCC,aC+CZC,qBAzCX,SAAAA,IAAc,IAAAd,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,IACVd,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAa,GAAAR,KAAAH,QAaJY,eAAiB,SAACC,GACdhB,EAAKW,SAAS,CAAEM,YAAcD,EAAME,OAAOC,SAb3CnB,EAAKO,MAAQ,CACT1B,OAAQ,GACRoC,YAAa,IAJPjB,mFAQM,IAAAoB,EAAAjB,KAChBkB,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKT,SAAU,CAAC9B,OAAQ4C,uCAOtC,IAAAC,EAC0BvB,KAAKI,MAA7B1B,EADF6C,EACE7C,OAASoC,EADXS,EACWT,YACVU,EAAiB9C,EAAO+C,OAAO,SAAAC,GACjC,OAAOA,EAAM1D,KAAK2D,cAAcC,SAASd,EAAYa,iBAEzD,OAAKjD,EAAOmD,OAIJ1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACyD,EAAD,CAAW7C,aAAgBe,KAAKY,iBAChCzC,EAAAC,EAAAC,cAAC0D,EAAD,KACI5D,EAAAC,EAAAC,cAAC2D,EAAD,KACI7D,EAAAC,EAAAC,cAAC4D,EAAD,CAAUvD,OAAU8C,OAR7BrD,EAAAC,EAAAC,cAAA,+BAzBDqC,cCKHwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAnB,KAAAkB,EAAAE,KAAA,UAAqBpB,KAAK,SAAApD,GAAiD,IAA9CyE,EAA8CzE,EAA9CyE,OAAQC,EAAsC1E,EAAtC0E,OAAQC,EAA8B3E,EAA9B2E,OAAQC,EAAsB5E,EAAtB4E,OAAQC,EAAc7E,EAAd6E,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,YCADU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH9E,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6E,EAAD,QAQJhB","file":"static/js/main.d2d60755.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card({name, email, id}) {\r\n    \r\n    return (\r\n        <div className='tc bg-light-blue dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=250x250`} />\r\n            <div>\r\n                <h3>{name}</h3>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );  \r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n        return (\r\n            <div>\r\n                { \r\n                robots.map((_user,i) => {\r\n                return (\r\n                    <Card \r\n                        key={i} \r\n                        id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        email={robots[i].email}\r\n                        />\r\n                        \r\n                    );\r\n                })\r\n                }\r\n            </div>\r\n                 );\r\n    }\r\n    \r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({ searchChange }) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-washed-blue'\r\n            type='search' \r\n            placeholder='search robots'  \r\n            onChange={searchChange}\r\n            />      \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black' , height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooooops. This is not good</h1>\r\n        }\r\n        return this.props.childrecdcdn\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState( {robots: users}))                \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield : event.target.value})            \r\n    }\r\n      \r\n    render() {\r\n        const {robots , searchfield} = this.state\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        if (!robots.length) {\r\n            return <h1>Loading...</h1>\r\n        } else {\r\n            return(\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <Searchbox searchChange = {this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots = {filteredRobots} />\r\n                        </ErrorBoundry>  \r\n                    </Scroll>\r\n\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n} \r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <div> \n    <App />\n  </div>\n      \n);\n  \n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}